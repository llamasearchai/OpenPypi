name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'

jobs:
  # Security and vulnerability scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
        pip install -r requirements.txt
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -f txt
      continue-on-error: true
      
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
      
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto src/
      continue-on-error: true
      
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Code quality and formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint mypy
        pip install -r requirements.txt
        
    - name: Check code formatting with Black
      run: black --check --diff src/ tests/
      
    - name: Check import sorting with isort
      run: isort --check-only --diff src/ tests/
      
    - name: Lint with flake8
      run: flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Lint with pylint
      run: pylint src/ --disable=C0114,C0115,C0116 --max-line-length=100
      continue-on-error: true
      
    - name: Type check with mypy
      run: mypy src/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  # Unit and integration testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry install --with dev
    - name: Run tests
      run: |
        poetry run pytest --cov=openpypi --cov-report=xml
    - name: Upload coverage
      uses: codecov/codecov-action@v3

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install locust
        
    - name: Start API server
      run: |
        uvicorn openpypi.api.app:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --host=http://localhost:8000 \
               --users=10 --spawn-rate=2 --run-time=60s --headless
               
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: locust_*.html

  # Docker build and security scan
  docker:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [security, code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: development
        tags: openpypi:dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        target: production
        tags: openpypi:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: openpypi:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install sphinx sphinx-rtd-theme myst-parser
        
    - name: Build documentation
      run: |
        cd docs
        make html
        
    - name: Deploy documentation to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Release and deployment
  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry install
    - name: Build package
      run: poetry build
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        repository_url: https://upload.pypi.org/legacy/
        verbose: true

  # Deploy to staging/production
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment scripts here
        # Examples:
        # - Deploy to Kubernetes
        # - Deploy to AWS ECS
        # - Deploy to Heroku
        # - Update infrastructure with Terraform
        
  # Notification
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [security, code-quality, test, docker, docs]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "All checks passed!"
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "Some checks failed!"
        # Add notification logic here (Slack, Discord, email, etc.) 