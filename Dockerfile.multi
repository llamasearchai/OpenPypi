# Multi-stage Docker build for OpenPypi
# This provides both development and production images

# Build stage
FROM python:3.11-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python dependencies
COPY pyproject.toml MANIFEST.in ./
COPY src/ ./src/

# Install dependencies
RUN pip install --no-cache-dir build wheel twine

# Build the package
RUN python -m build

# Production stage
FROM python:3.11-slim as production

LABEL maintainer="OpenPypi Team <team@openpypi.com>"
LABEL version="1.0.0"
LABEL description="OpenPypi - Complete Python Project Generator"

# Create non-root user
RUN groupadd -r openpypi && useradd --no-log-init -r -g openpypi openpypi

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy built package from builder stage
COPY --from=builder /app/dist/*.whl /tmp/

# Install the package
RUN pip install --no-cache-dir /tmp/*.whl && rm /tmp/*.whl

# Install additional dependencies for API server
RUN pip install --no-cache-dir uvicorn[standard] gunicorn

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/config && \
    chown -R openpypi:openpypi /app

# Copy configuration files
COPY docker/entrypoint.sh /entrypoint.sh
COPY docker/healthcheck.py /healthcheck.py
RUN chmod +x /entrypoint.sh

# Set user
USER openpypi

# Environment variables
ENV PYTHONPATH=/app
ENV OPENPYPI_LOG_LEVEL=INFO
ENV OPENPYPI_DATA_DIR=/app/data
ENV OPENPYPI_CONFIG_DIR=/app/config

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python /healthcheck.py

# Expose ports
EXPOSE 8000

# Default command
CMD ["/entrypoint.sh"]

# Development stage
FROM python:3.11-slim as development

WORKDIR /app

# Install all dependencies including dev tools
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    curl \
    git \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Copy source code
COPY . .

# Install package in development mode with all extras
RUN pip install -e ".[api,openai,docker,cloud,dev,test,docs]"

# Expose ports for development
EXPOSE 8000 5000

# Default command for development
CMD ["uvicorn", "openpypi.api.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"] 