version: '3.9'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: openpypi-app # You can tag it for easier reference
    container_name: openpypi_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./src:/home/appuser/app/src # Mount src for development hot-reloading
      # - ./openpypi.toml:/home/appuser/app/openpypi.toml # Mount config if needed
      # - ./logs:/home/appuser/app/logs # Persistent logs
    environment:
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres_user:postgres_password@db:5432/openpypi_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY} # Pass from .env file or host environment
      - API_SECRET_KEY=your_super_secret_api_key_for_dev # For JWTs or API key auth
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be healthy
      redis:
        condition: service_started # Or service_healthy if Redis has a healthcheck
    networks:
      - openpypi_network
    # command: ["poetry", "run", "uvicorn", "openpypi.api.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  db:
    image: postgres:15-alpine
    container_name: openpypi_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: openpypi_db
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # You can add initialization scripts here if needed: e.g. ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "54320:5432" # Expose on a different host port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d openpypi_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - openpypi_network

  redis:
    image: redis:7-alpine
    container_name: openpypi_redis
    restart: unless-stopped
    ports:
      - "63790:6379" # Expose on a different host port
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - openpypi_network

  # Optional: Nginx for reverse proxy, SSL termination in a more production-like setup
  # nginx:
  #   image: nginx:latest
  #   container_name: openpypi_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/certs:/etc/nginx/certs:ro # For SSL certificates
  #   depends_on:
  #     - app
  #   networks:
  #     - openpypi_network

volumes:
  postgres_data:
    driver: local

networks:
  openpypi_network:
    driver: bridge 