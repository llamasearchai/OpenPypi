[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "openpypi"
version = "0.3.0"
description = "A comprehensive Python package creation, testing, and publishing platform with AI assistance and automated workflows"
authors = [
    "Nik Jois <nikjois@llamasearch.ai>",
]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/openpypi/openpypi"
repository = "https://github.com/openpypi/openpypi"
documentation = "https://openpypi.readthedocs.io"
keywords = [
    "python", "package", "pypi", "automation", "ai", "fastapi", 
    "docker", "testing", "ci-cd", "packaging", "development"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Build Tools",
    "Topic :: System :: Software Distribution",
    "Framework :: FastAPI",
]
packages = [{include = "openpypi", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

# Core web framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
gunicorn = "^21.2.0"

# Database and caching
sqlalchemy = "^2.0.23"
alembic = "^1.12.1"
asyncpg = "^0.29.0"
psycopg2-binary = "^2.9.9"
redis = "^5.0.1"

# HTTP client and validation
httpx = "^0.25.2"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"

# Authentication and security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"

# AI and OpenAI integration
openai = "^1.3.0"
tiktoken = "^0.5.1"

# Package management and building
build = "^1.0.3"
wheel = "^0.42.0"
twine = "^4.0.2"
packaging = "^23.2"
toml = "^0.10.2"
tomli = "^2.0.1"

# Docker integration
docker = "^6.1.3"

# GitHub integration
pygithub = "^2.1.1"

# Cloud providers (optional)
boto3 = {version = "^1.34.0", optional = true}
google-cloud-storage = {version = "^2.10.0", optional = true}
azure-storage-blob = {version = "^12.19.0", optional = true}

# Monitoring and logging
structlog = "^23.2.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.38.0"}

# Utilities
click = "^8.1.7"
rich = "^13.7.0"
typer = "^0.9.0"
jinja2 = "^3.1.2"
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
aiofiles = "^23.2.1"
croniter = "^2.0.1"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"
pytest-timeout = "^2.2.0"
httpx-oauth = "^0.7.1"

# Code quality
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pylint = "^3.0.3"
pre-commit = "^3.6.0"

# Security
bandit = "^1.7.5"
safety = "^2.3.5"
pip-audit = "^2.6.1"
semgrep = "^1.48.0"

# Documentation
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"

# Development tools
ipython = "^8.17.2"
jupyterlab = "^4.0.8"
notebook = "^7.0.6"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-xdist = "^3.5.0"
pytest-mock = "^3.12.0"
pytest-benchmark = "^4.0.0"
pytest-timeout = "^2.2.0"
coverage = "^7.3.2"
factory-boy = "^3.3.0"
faker = "^20.1.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.2.6"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"
sphinx-autodoc-typehints = "^1.25.2"
sphinx-copybutton = "^0.5.2"

[tool.poetry.extras]
aws = ["boto3"]
gcp = ["google-cloud-storage"]
azure = ["azure-storage-blob"]
all = ["boto3", "google-cloud-storage", "azure-storage-blob"]

[tool.poetry.scripts]
openpypi = "openpypi.cli:main"
openpypi-server = "openpypi.api.app:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/openpypi/openpypi/issues"
"Changelog" = "https://github.com/openpypi/openpypi/blob/main/CHANGELOG.md"
"Documentation" = "https://openpypi.readthedocs.io"
"Source Code" = "https://github.com/openpypi/openpypi"

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["**/migrations/*"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true

[[tool.mypy.overrides]]
module = [
    "docker.*",
    "github.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=openpypi",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=20",
    "--tb=short",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "stress: marks tests as stress tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Pylint configuration
[tool.pylint.master]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement",
]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "fixme",
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60
max-attributes = 10
min-public-methods = 1
max-public-methods = 25

# Flake8 configuration (in setup.cfg or tox.ini typically, but for reference)
# [tool.flake8] is not supported, use setup.cfg

# Pre-commit hooks configuration (use .pre-commit-config.yaml file instead)
# TOML format doesn't support the complex structure needed for pre-commit
# Create a separate .pre-commit-config.yaml file for pre-commit configuration 