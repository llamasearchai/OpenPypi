[build-system]
requires = ["setuptools>=69.0.0", "wheel", "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name = "openpypi"
dynamic = ["version"]
description = "AI-powered Python package generator with comprehensive project management capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "OpenPypi Team", email = "team@openpypi.dev"},
]
maintainers = [
    {name = "OpenPypi Team", email = "team@openpypi.dev"},
]
keywords = [
    "python",
    "package",
    "generator",
    "ai",
    "automation",
    "code-generation",
    "project-management",
    "pypi",
    "cli",
    "api"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Utilities",
]
dependencies = [
    "click>=8.0.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    "pydantic>=2.0.0",
    "openai>=1.80.0",
    "httpx>=0.27.0",
    "python-multipart>=0.0.20",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "tenacity>=9.0.0",
    "rich>=13.0.0",
    "typer>=0.12.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "faker>=30.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.7.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.4.0",
    "bandit>=1.8.0",
    "safety>=3.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.7.0",
]
build = [
    "build>=1.2.0",
    "twine>=5.0.0",
    "setuptools-scm>=8.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/openpypi/openpypi"
Repository = "https://github.com/openpypi/openpypi.git"
Documentation = "https://openpypi.readthedocs.io"
"Bug Tracker" = "https://github.com/openpypi/openpypi/issues"
Changelog = "https://github.com/openpypi/openpypi/blob/main/CHANGELOG.md"

[project.scripts]
openpypi = "openpypi.cli:main"

[project.entry-points."openpypi.providers"]
openai = "openpypi.providers.openai_provider:OpenAIProvider"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["openpypi*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
openpypi = ["templates/**/*", "py.typed"]

[tool.setuptools_scm]
write_to = "src/openpypi/_version.py"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "stress: marks tests as stress tests",
    "benchmark: marks tests for performance benchmarking",
]

[tool.coverage.run]
source = ["openpypi"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/_version.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*", "*_test.py"]
skips = ["B101", "B601"] 